/*
	任务描述:
本关任务：编写一个能求解0-1背包问题的程序。
	相关知识:
为了完成本关任务，你需要掌握如何编写动态规划程序。
有一个背包，能装载的总重量为C<300, 有 n<100个物体，每个物体的重量为w[i]>0,价值为v[i]>0, 从中选取一些物体装入背包，要求这些物体的总价值最大。
	编程要求:
根据提示，在右侧编辑器编写函数代码 void knapsack(int n, int C, int w[], int v[], int x[])
其中，n是物体个数，C是背包容量，w是物体重量数组，v是物体价值数组.
最后求出的装包方案保存在数组x中传回测试系统.
注意w[0]…w[n-1]存放物体数据，v和x也是如此。
	测试说明:
平台会对你编写的代码进行测试：
	测试输入：
n=5, C=100,
w[]=77 22 29 50 99
v[]=92 22 87 46 90
	预期输出：
x[]=0 0 1 1 0
*/

#include<stdio.h>
#define max(a,b) a>b?a:b
int D[100][100];
int Fill_D(int n,int C,int w[],int v[]){
	int i,j;
	for(i=1;i<=n;i++)
		for(j=1;j<=C;j++)
			if(j<w[i]) D[i][j] = D[i-1][j];
			else D[i][j] = max(D[i-1][j],D[i-1][j-w[i]]+v[i]);
	return 1;
}
void knapsack(int n,int C,int w[],int v[],int x[]){
	int i,j;
	Fill_D(n,C,w,v);
	i=n;j=C;
	while(i>0)
		if(D[i][j] == D[i-1][j]){
			x[i] = 0;
			i--;
		}
		else{
			x[i] = 1;
			j-=w[i];
			i--;
		}
}

int main(){
	int n = 5,C=100,x[100],w[]={77,22,29,50,99},v[]={92,22,87,46,90};
	int i,j;
	knapsack(n,C,w,v,x);
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
			printf("%d ",D[i][j]);
	return 0;
}
