/*
并查集-臭虫也疯狂
霍普教授研究臭虫的性取向。实验前他弄清楚了n个臭虫的性别，并在臭虫的背上标了数字编号（1~n）。现在给一批臭虫的编号配对，要检查里面有没有同性恋。
输入描述
第一行是整数c,下面接着有c个测试用例。每个测试用例的第一行是臭虫的数目n（1~2000），以及配对的数目m（1~10^6）。接下来的行就是m个配对的臭虫编号.
输出描述
一共c行， 每行打印“testcase i:没发现同性恋”,或者“testcase i:发现同性恋”
输入样例
2
3 3
1 2
2 3
1 3
4 2
1 2
3 4
输出样例
testcase 1:发现同性恋
testcase 2:没有发现同性恋
*/

#include<stdio.h>
/* return root*/
int find_root(int x, int parent[]){
	int x_root = x;
	while(parent[x_root] != -1)
		x_root = parent[x_root];
	return x_root;
}
/* return 1 union successfully - return 0 union failed*/
int union_disjointset(int x, int y, int parent[]){
	int x_root = find_root(x,parent);
	int y_root = find_root(y,parent);
	if(x_root == y_root && x_root!=-1 && y_root!=-1)
		return 0;
	else{
		parent[x_root] = y_root;
		return 1;
	}
}

int main(){
	int c,n,m;
	int i,j,a,b;
	scanf("%d",&c);
	int flag[c];
	for(i=1; i<=c; i++){
		flag[i] = 0;
		scanf("%d %d",&n,&m);
		if(n<2000&&m<1000000){
		int parent[n+1];
		int edge[m][2];
		for(j=0; j<n+1; j++)
			parent[j] = -1;
		for(j=0; j<m; j++){
			scanf("%d %d",&a,&b);
			edge[j][0] = a;
			edge[j][1] = b;
		}
		for(j=0; j<m; j++)
			if(union_disjointset(edge[j][0],edge[j][1],parent) == 0){
				flag[i-1] = 1;
				break;
			}
		}
	}
	for(i=1; i<=c; i++)
		if(flag[i-1] == 1)
			printf("testcase %d:发现同性恋\n",i);
		else 
			printf("testcase %d:没有发现同性恋\n",i);
	return 0;
} 
